{"version":3,"sources":["components/Footer.tsx","components/ResultViewer.tsx","components/Spinner.tsx","services/client.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Footer","className","href","ResultViewer","props","res","stdout","stderr","Spinner","client","Client","langMap","mapLang","lang","App","useState","specs","setSpecs","selectedLang","setSelectedLang","code","setCode","execRes","setExecRes","isExecuting","setIsExecuting","a","exec","language","useEffect","spec","then","Object","keys","langs","map","l","onChange","v","target","value","onClick","disabled","height","theme","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAeeA,MAbf,WACE,OACE,qBAAKC,UAAU,SAAf,SACE,wKAIE,mBAAGC,KAAK,2BAAR,2B,MCiBOC,MAnBf,SAAsBC,GACpB,OACE,sBAAKH,UAAU,gBAAf,UACGG,EAAMC,IAAIC,QACT,gCACE,qBAAKL,UAAU,UAAf,oBACA,8BAAMG,EAAMC,IAAIC,YAGnBF,EAAMC,IAAIE,QACT,gCACE,qBAAKN,UAAU,UAAf,oBACA,qBAAKA,UAAU,SAAf,SAAyBG,EAAMC,IAAIE,gB,MCT9BC,MARf,WACE,OACE,qBAAKP,UAAU,UAAf,SACE,2BCFSQ,EADA,I,KAAIC,QAAO,iCCYpBC,EAAqB,CACzB,QAAW,SACX,aAAc,QA2DhB,SAASC,EAAQC,GAAuB,IAAD,EACrC,iBAAOF,EAAQE,UAAf,QAAwBA,EAGXC,MA5Df,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAwCF,mBAAS,IAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACA,EAAwBJ,mBAAS,IAAjC,mBAAOK,EAAP,KAAaC,EAAb,KACA,EAA8BN,mBAAS,IAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KACA,EAAsCR,oBAAS,GAA/C,mBAAOS,EAAP,KAAoBC,EAApB,KALa,4CAcb,4BAAAC,EAAA,yDACOF,IAAeJ,IAAQF,EAD9B,wBAEIO,GAAe,GACfF,EAAW,IAHf,kBAKwBd,EAAOkB,KAAK,CAAEC,SAAUV,EAAcE,KAAMA,IALpE,OAKYf,EALZ,OAMMkB,EAAWlB,GANjB,0DAQIoB,GAAe,GARnB,2DAda,sBAObI,qBAAU,WACRpB,EAAOqB,OAAOC,MAAK,SAAC1B,GAClBY,EAASZ,GACTc,EAAgBa,OAAOC,KAAK5B,GAAK,SAElC,IAcH,IAAM6B,EAAQF,OAAOC,KAAKjB,GAAOmB,KAAI,SAACC,GAAD,OAAO,iCAAiBA,GAAJA,MACzD,OACE,sBAAKnC,UAAU,YAAf,UACE,sBAAKA,UAAU,gBAAf,UACE,sBAAKA,UAAU,WAAf,UACE,wBACEA,UAAU,OACVoC,SAAU,SAACC,GAAD,OAAOnB,EAAgBmB,EAAEC,OAAOC,QAC1CA,MAAOtB,EAHT,SAKGgB,IAEH,wBAAQjC,UAAU,MAAMwC,QAtCnB,2CAsCiCC,SAAUlB,EAAhD,uBAIF,cAAC,IAAD,CACEmB,OAAO,OACPf,SAAUhB,EAAQM,GAClB0B,MAAM,UACNP,SAAU,SAACC,GAAD,OAAOjB,EAAQiB,MAE1Bd,GAAe,cAAC,EAAD,IAChB,cAAC,EAAD,CAAcnB,IAAKiB,OAErB,cAAC,EAAD,QCxDSuB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b4cc8cb6.chunk.js","sourcesContent":["import './Footer.scss';\n\nfunction Footer() {\n  return (\n    <div className=\"footer\">\n      <span>\n        ranna&nbsp;&nbsp;|&nbsp;&nbsp;© 2021 Ringo Hoffmann (zekro\n        Development)&nbsp;&nbsp;|&nbsp;&nbsp; Endpoint:\n        public.ranna.zekro.de&nbsp;&nbsp;|&nbsp;&nbsp;\n        <a href=\"https://zekro.de/imprint\">imprint</a>\n      </span>\n    </div>\n  );\n}\n\nexport default Footer;\n","import { ExecutionResponse } from '@ranna-go/ranna-ts/dist/models';\nimport './ResultViewer.scss';\n\ninterface ResultViewerProps {\n  res: ExecutionResponse;\n}\n\nfunction ResultViewer(props: ResultViewerProps) {\n  return (\n    <div className=\"result-viewer\">\n      {props.res.stdout && (\n        <div>\n          <div className=\"heading\">stdout</div>\n          <div>{props.res.stdout}</div>\n        </div>\n      )}\n      {props.res.stderr && (\n        <div>\n          <div className=\"heading\">stderr</div>\n          <div className=\"stderr\">{props.res.stderr}</div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default ResultViewer;\n","import './Spinner.scss';\n\nfunction Spinner() {\n  return (\n    <div className=\"spinner\">\n      <div></div>\n    </div>\n  );\n}\n\nexport default Spinner;\n","import { Client } from '@ranna-go/ranna-ts';\n\nconst client = new Client('https://public.ranna.zekro.de');\nexport default client;\n","import Editor from '@monaco-editor/react';\nimport {\n  ExecutionResponse,\n  SpecMap,\n  StringMap,\n} from '@ranna-go/ranna-ts/dist/models';\nimport React, { useEffect } from 'react';\nimport { useState } from 'react';\nimport './App.scss';\nimport Footer from './components/Footer';\nimport ResultViewer from './components/ResultViewer';\nimport Spinner from './components/Spinner';\nimport client from './services/client';\n\nconst langMap: StringMap = {\n  'python3': 'python',\n  'openjdk-11': 'java',\n};\n\nfunction App() {\n  const [specs, setSpecs] = useState({} as SpecMap);\n  const [selectedLang, setSelectedLang] = useState('');\n  const [code, setCode] = useState('');\n  const [execRes, setExecRes] = useState({} as ExecutionResponse);\n  const [isExecuting, setIsExecuting] = useState(false);\n\n  useEffect(() => {\n    client.spec().then((res) => {\n      setSpecs(res);\n      setSelectedLang(Object.keys(res)[0]);\n    });\n  }, []);\n\n  async function run() {\n    if (!isExecuting && code && selectedLang) {\n      setIsExecuting(true);\n      setExecRes({} as ExecutionResponse);\n      try {\n        const res = await client.exec({ language: selectedLang, code: code });\n        setExecRes(res);\n      } catch {}\n      setIsExecuting(false);\n    }\n  }\n\n  const langs = Object.keys(specs).map((l) => <option key={l}>{l}</option>);\n  return (\n    <div className=\"container\">\n      <div className=\"app-container\">\n        <div className=\"controls\">\n          <select\n            className=\"lang\"\n            onChange={(v) => setSelectedLang(v.target.value)}\n            value={selectedLang}\n          >\n            {langs}\n          </select>\n          <button className=\"run\" onClick={run} disabled={isExecuting}>\n            ▶\n          </button>\n        </div>\n        <Editor\n          height=\"45vh\"\n          language={mapLang(selectedLang)}\n          theme=\"vs-dark\"\n          onChange={(v) => setCode(v!)}\n        ></Editor>\n        {isExecuting && <Spinner />}\n        <ResultViewer res={execRes} />\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nfunction mapLang(lang: string): string {\n  return langMap[lang] ?? lang;\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}