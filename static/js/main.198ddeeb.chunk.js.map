{"version":3,"sources":["components/spinner/Spinner.tsx","components/header/Header.tsx","components/result-viewer/ResultViewer.tsx","components/snackbar/Snackbar.tsx","services/client.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Spinner","className","Header","props","options","languages","map","l","disabled","onClick","onExecute","call","isExecuting","value","selectedLanguage","onChange","e","onLanguageSelect","target","onShare","linebreak","s","split","trim","res","slice","length","push","ResultViewer","stdout","stderr","Snackbar","id","show","onHide","style","backgroundColor","color","children","client","Client","snippets","SnippetsClient","langMap","mapLang","lang","App","useState","specs","setSpecs","selectedLang","setSelectedLang","code","setCode","execRes","setExecRes","setIsExecuting","showSnackbar","setShowSnackbar","snackbarContent","setSnackbarContent","snippetIdent","useRef","originalSnippetCode","a","exec","language","current","create","snippet","ident","window","history","pushState","readOnly","location","origin","onFocus","select","useEffect","URLSearchParams","search","get","spec","then","Object","keys","catch","v","run","share","height","theme","wrapperClassName","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.198ddeeb.chunk.js","sourcesContent":["import './Spinner.scss';\n\nexport default function Spinner() {\n  return (\n    <div className=\"lds-ellipsis\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n}\n","import Spinner from '../spinner/Spinner';\nimport './Header.scss';\n\ninterface HeaderProperties {\n  languages: string[];\n  selectedLanguage: string;\n  isExecuting?: boolean;\n  disabled?: boolean;\n\n  onLanguageSelect?: (v: string) => void;\n  onExecute?: () => void;\n  onShare?: () => void;\n}\n\nexport default function Header(props: HeaderProperties) {\n  const options = props.languages.map((l) => <option key={l}>{l}</option>);\n  return (\n    <div className=\"header\">\n      <button\n        className=\"execute\"\n        disabled={props.disabled}\n        onClick={() => props.onExecute?.call(null)}\n      >\n        {props.isExecuting ? <Spinner /> : <span>â–¶ execute</span>}\n      </button>\n      <select\n        value={props.selectedLanguage}\n        onChange={(e) => props.onLanguageSelect?.call(null, e.target.value)}\n      >\n        {options}\n      </select>\n      <button\n        className=\"share\"\n        disabled={props.disabled}\n        onClick={() => props.onShare?.call(null)}\n      >\n        ðŸ”— share snippet\n      </button>\n    </div>\n  );\n}\n","import { ExecutionResponse } from '@ranna-go/ranna-ts/dist/models';\nimport './ResultViewer.scss';\n\ninterface ResultViewerProps {\n  res: ExecutionResponse;\n}\n\nfunction ResultViewer(props: ResultViewerProps) {\n  return (\n    <div className=\"result-viewer\">\n      {props.res.stdout && (\n        <div>\n          <div className=\"heading\">stdout</div>\n          <div>{linebreak(props.res.stdout)}</div>\n        </div>\n      )}\n      {props.res.stderr && (\n        <div>\n          <div className=\"heading\">stderr</div>\n          <div className=\"stderr\">{linebreak(props.res.stderr)}</div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction linebreak(s: string): JSX.Element[] {\n  const split = s.trim().split('\\n');\n  const res = split.slice(0, split.length - 1).map((l) => (\n    <span>\n      {l}\n      <br />\n    </span>\n  ));\n  res.push(<span>{split[split.length - 1]}</span>);\n  return res;\n}\n\nexport default ResultViewer;\n","import './Snackbar.scss';\n\ninterface SnackbarProps {\n  show?: boolean;\n  children?: JSX.Element | JSX.Element[];\n  color?: string;\n  onHide?: () => void;\n}\n\nexport default function Snackbar(props: SnackbarProps) {\n  function onClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if ((e.target as HTMLElement).id === 'snackbar-outer-container') {\n      props.onHide?.call(null);\n    }\n  }\n\n  return (\n    <div\n      id=\"snackbar-outer-container\"\n      className={props.show ? ' show' : ''}\n      onClick={(e) => onClick(e)}\n    >\n      <div\n        className=\"snackbar-container\"\n        style={{\n          backgroundColor: props.color ?? '#2196F3',\n        }}\n      >\n        {props.children}\n      </div>\n    </div>\n  );\n}\n","import { Client, SnippetsClient } from '@ranna-go/ranna-ts';\n\nconst client = new Client('https://public.ranna.zekro.de');\nconst snippets = new SnippetsClient('https://snippets.ranna.zekro.de');\n\nexport { client, snippets };\n","import Editor from '@monaco-editor/react';\nimport {\n  ExecutionResponse,\n  Snippet,\n  SpecMap,\n  StringMap,\n} from '@ranna-go/ranna-ts';\nimport { useEffect, useRef } from 'react';\nimport { useState } from 'react';\nimport './App.scss';\nimport Header from './components/header/Header';\nimport ResultViewer from './components/result-viewer/ResultViewer';\nimport Snackbar from './components/snackbar/Snackbar';\nimport { client, snippets } from './services/client';\n\nconst langMap: StringMap = {\n  'python3': 'python',\n  'openjdk-11': 'java',\n};\n\nfunction App() {\n  const [specs, setSpecs] = useState({} as SpecMap);\n  const [selectedLang, setSelectedLang] = useState('');\n  const [code, setCode] = useState('');\n  const [execRes, setExecRes] = useState({} as ExecutionResponse);\n  const [isExecuting, setIsExecuting] = useState(false);\n  const [showSnackbar, setShowSnackbar] = useState(false);\n  const [snackbarContent, setSnackbarContent] = useState<JSX.Element>();\n\n  const snippetIdent = useRef<string | null>();\n  const originalSnippetCode = useRef<string>();\n\n  useEffect(() => {\n    snippetIdent.current = new URLSearchParams(window.location.search).get('s');\n\n    client.spec().then((res) => {\n      setSpecs(res);\n      setSelectedLang(Object.keys(res)[0]);\n    });\n\n    if (snippetIdent.current) {\n      snippets\n        .get(snippetIdent.current)\n        .then((snippet) => {\n          setSelectedLang(snippet.language);\n          setCode(snippet.code);\n          originalSnippetCode.current = snippet.code;\n        })\n        .catch();\n    }\n  }, []);\n\n  async function run() {\n    if (!isExecuting && code && selectedLang) {\n      setIsExecuting(true);\n      setExecRes({} as ExecutionResponse);\n      try {\n        const res = await client.exec({ language: selectedLang, code: code });\n        setExecRes(res);\n      } catch {}\n      setIsExecuting(false);\n    }\n  }\n\n  async function share() {\n    if (code && selectedLang) {\n      try {\n        if (\n          !snippetIdent.current ||\n          code.trim() !== originalSnippetCode.current?.trim()\n        ) {\n          const snippet = await snippets.create({\n            code: code,\n            language: selectedLang,\n          } as Snippet);\n          snippetIdent.current = snippet.ident;\n          window.history.pushState('', '', '/?s=' + snippetIdent.current);\n        }\n\n        setSnackbarContent(\n          <div>\n            <span>You can share the snippet using this link.</span>\n            <br />\n            <input\n              className=\"share-input\"\n              readOnly\n              value={window.location.origin + '?s=' + snippetIdent.current}\n              onFocus={(e) => e.target.select()}\n            />\n          </div>\n        );\n        setShowSnackbar(true);\n      } catch {}\n    }\n  }\n\n  return (\n    <div className=\"container\">\n      <Snackbar show={showSnackbar} onHide={() => setShowSnackbar(false)}>\n        {snackbarContent}\n      </Snackbar>\n      <Header\n        languages={Object.keys(specs) ?? []}\n        selectedLanguage={selectedLang}\n        isExecuting={isExecuting}\n        disabled={!code}\n        onLanguageSelect={(v) => setSelectedLang(v)}\n        onExecute={() => run()}\n        onShare={() => share()}\n      />\n      <Editor\n        height=\"calc(100vh - 105px)\"\n        language={mapLang(selectedLang)}\n        theme=\"vs-dark\"\n        value={code}\n        onChange={(v) => setCode(v!)}\n        wrapperClassName=\"code-editor\"\n      ></Editor>\n      <ResultViewer res={execRes} />\n    </div>\n  );\n}\n\nfunction mapLang(lang: string): string {\n  return langMap[lang] ?? lang;\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}